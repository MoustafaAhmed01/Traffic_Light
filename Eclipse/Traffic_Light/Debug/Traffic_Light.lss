
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000010b4  00001148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800078  00800078  00001160  2**0
                  ALLOC
  3 .stab         000018f0  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001619  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__vector_1>
       8:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_2>
       c:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_7>
      20:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
      8a:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_setupPinDirection+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <GPIO_setupPinDirection+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	6a 83       	std	Y+2, r22	; 0x02
      a4:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	84 30       	cpi	r24, 0x04	; 4
      aa:	08 f0       	brcs	.+2      	; 0xae <GPIO_setupPinDirection+0x1c>
      ac:	d5 c0       	rjmp	.+426    	; 0x258 <GPIO_setupPinDirection+0x1c6>
      ae:	8a 81       	ldd	r24, Y+2	; 0x02
      b0:	88 30       	cpi	r24, 0x08	; 8
      b2:	08 f0       	brcs	.+2      	; 0xb6 <GPIO_setupPinDirection+0x24>
      b4:	d1 c0       	rjmp	.+418    	; 0x258 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
      b6:	89 81       	ldd	r24, Y+1	; 0x01
      b8:	28 2f       	mov	r18, r24
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	3d 83       	std	Y+5, r19	; 0x05
      be:	2c 83       	std	Y+4, r18	; 0x04
      c0:	8c 81       	ldd	r24, Y+4	; 0x04
      c2:	9d 81       	ldd	r25, Y+5	; 0x05
      c4:	81 30       	cpi	r24, 0x01	; 1
      c6:	91 05       	cpc	r25, r1
      c8:	09 f4       	brne	.+2      	; 0xcc <GPIO_setupPinDirection+0x3a>
      ca:	43 c0       	rjmp	.+134    	; 0x152 <GPIO_setupPinDirection+0xc0>
      cc:	2c 81       	ldd	r18, Y+4	; 0x04
      ce:	3d 81       	ldd	r19, Y+5	; 0x05
      d0:	22 30       	cpi	r18, 0x02	; 2
      d2:	31 05       	cpc	r19, r1
      d4:	2c f4       	brge	.+10     	; 0xe0 <GPIO_setupPinDirection+0x4e>
      d6:	8c 81       	ldd	r24, Y+4	; 0x04
      d8:	9d 81       	ldd	r25, Y+5	; 0x05
      da:	00 97       	sbiw	r24, 0x00	; 0
      dc:	71 f0       	breq	.+28     	; 0xfa <GPIO_setupPinDirection+0x68>
      de:	bc c0       	rjmp	.+376    	; 0x258 <GPIO_setupPinDirection+0x1c6>
      e0:	2c 81       	ldd	r18, Y+4	; 0x04
      e2:	3d 81       	ldd	r19, Y+5	; 0x05
      e4:	22 30       	cpi	r18, 0x02	; 2
      e6:	31 05       	cpc	r19, r1
      e8:	09 f4       	brne	.+2      	; 0xec <GPIO_setupPinDirection+0x5a>
      ea:	5f c0       	rjmp	.+190    	; 0x1aa <GPIO_setupPinDirection+0x118>
      ec:	8c 81       	ldd	r24, Y+4	; 0x04
      ee:	9d 81       	ldd	r25, Y+5	; 0x05
      f0:	83 30       	cpi	r24, 0x03	; 3
      f2:	91 05       	cpc	r25, r1
      f4:	09 f4       	brne	.+2      	; 0xf8 <GPIO_setupPinDirection+0x66>
      f6:	85 c0       	rjmp	.+266    	; 0x202 <GPIO_setupPinDirection+0x170>
      f8:	af c0       	rjmp	.+350    	; 0x258 <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
      fa:	8b 81       	ldd	r24, Y+3	; 0x03
      fc:	88 23       	and	r24, r24
      fe:	a9 f4       	brne	.+42     	; 0x12a <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     100:	aa e3       	ldi	r26, 0x3A	; 58
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	ea e3       	ldi	r30, 0x3A	; 58
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	48 2f       	mov	r20, r24
     10c:	8a 81       	ldd	r24, Y+2	; 0x02
     10e:	28 2f       	mov	r18, r24
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	02 2e       	mov	r0, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_setupPinDirection+0x8c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_setupPinDirection+0x88>
     122:	80 95       	com	r24
     124:	84 23       	and	r24, r20
     126:	8c 93       	st	X, r24
     128:	97 c0       	rjmp	.+302    	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     12a:	aa e3       	ldi	r26, 0x3A	; 58
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	ea e3       	ldi	r30, 0x3A	; 58
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	48 2f       	mov	r20, r24
     136:	8a 81       	ldd	r24, Y+2	; 0x02
     138:	28 2f       	mov	r18, r24
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	02 2e       	mov	r0, r18
     142:	02 c0       	rjmp	.+4      	; 0x148 <GPIO_setupPinDirection+0xb6>
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	0a 94       	dec	r0
     14a:	e2 f7       	brpl	.-8      	; 0x144 <GPIO_setupPinDirection+0xb2>
     14c:	84 2b       	or	r24, r20
     14e:	8c 93       	st	X, r24
     150:	83 c0       	rjmp	.+262    	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	88 23       	and	r24, r24
     156:	a9 f4       	brne	.+42     	; 0x182 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
     158:	a7 e3       	ldi	r26, 0x37	; 55
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e7 e3       	ldi	r30, 0x37	; 55
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	48 2f       	mov	r20, r24
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	28 2f       	mov	r18, r24
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 2e       	mov	r0, r18
     170:	02 c0       	rjmp	.+4      	; 0x176 <GPIO_setupPinDirection+0xe4>
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	0a 94       	dec	r0
     178:	e2 f7       	brpl	.-8      	; 0x172 <GPIO_setupPinDirection+0xe0>
     17a:	80 95       	com	r24
     17c:	84 23       	and	r24, r20
     17e:	8c 93       	st	X, r24
     180:	6b c0       	rjmp	.+214    	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
     182:	a7 e3       	ldi	r26, 0x37	; 55
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e7 e3       	ldi	r30, 0x37	; 55
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	48 2f       	mov	r20, r24
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	28 2f       	mov	r18, r24
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 2e       	mov	r0, r18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <GPIO_setupPinDirection+0x10e>
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	0a 94       	dec	r0
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <GPIO_setupPinDirection+0x10a>
     1a4:	84 2b       	or	r24, r20
     1a6:	8c 93       	st	X, r24
     1a8:	57 c0       	rjmp	.+174    	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	88 23       	and	r24, r24
     1ae:	a9 f4       	brne	.+42     	; 0x1da <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
     1b0:	a4 e3       	ldi	r26, 0x34	; 52
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	e4 e3       	ldi	r30, 0x34	; 52
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	48 2f       	mov	r20, r24
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	28 2f       	mov	r18, r24
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 2e       	mov	r0, r18
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GPIO_setupPinDirection+0x13c>
     1ca:	88 0f       	add	r24, r24
     1cc:	99 1f       	adc	r25, r25
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GPIO_setupPinDirection+0x138>
     1d2:	80 95       	com	r24
     1d4:	84 23       	and	r24, r20
     1d6:	8c 93       	st	X, r24
     1d8:	3f c0       	rjmp	.+126    	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
     1da:	a4 e3       	ldi	r26, 0x34	; 52
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e4 e3       	ldi	r30, 0x34	; 52
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	48 2f       	mov	r20, r24
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 2e       	mov	r0, r18
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GPIO_setupPinDirection+0x166>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GPIO_setupPinDirection+0x162>
     1fc:	84 2b       	or	r24, r20
     1fe:	8c 93       	st	X, r24
     200:	2b c0       	rjmp	.+86     	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	88 23       	and	r24, r24
     206:	a9 f4       	brne	.+42     	; 0x232 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
     208:	a1 e3       	ldi	r26, 0x31	; 49
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e1 e3       	ldi	r30, 0x31	; 49
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	48 2f       	mov	r20, r24
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	02 2e       	mov	r0, r18
     220:	02 c0       	rjmp	.+4      	; 0x226 <GPIO_setupPinDirection+0x194>
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	0a 94       	dec	r0
     228:	e2 f7       	brpl	.-8      	; 0x222 <GPIO_setupPinDirection+0x190>
     22a:	80 95       	com	r24
     22c:	84 23       	and	r24, r20
     22e:	8c 93       	st	X, r24
     230:	13 c0       	rjmp	.+38     	; 0x258 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
     232:	a1 e3       	ldi	r26, 0x31	; 49
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e1 e3       	ldi	r30, 0x31	; 49
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	48 2f       	mov	r20, r24
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	28 2f       	mov	r18, r24
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 2e       	mov	r0, r18
     24a:	02 c0       	rjmp	.+4      	; 0x250 <GPIO_setupPinDirection+0x1be>
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	0a 94       	dec	r0
     252:	e2 f7       	brpl	.-8      	; 0x24c <GPIO_setupPinDirection+0x1ba>
     254:	84 2b       	or	r24, r20
     256:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	00 d0       	rcall	.+0      	; 0x26e <GPIO_writePin+0x6>
     26e:	00 d0       	rcall	.+0      	; 0x270 <GPIO_writePin+0x8>
     270:	0f 92       	push	r0
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	6a 83       	std	Y+2, r22	; 0x02
     27a:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	84 30       	cpi	r24, 0x04	; 4
     280:	08 f0       	brcs	.+2      	; 0x284 <GPIO_writePin+0x1c>
     282:	d5 c0       	rjmp	.+426    	; 0x42e <GPIO_writePin+0x1c6>
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	88 30       	cpi	r24, 0x08	; 8
     288:	08 f0       	brcs	.+2      	; 0x28c <GPIO_writePin+0x24>
     28a:	d1 c0       	rjmp	.+418    	; 0x42e <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	28 2f       	mov	r18, r24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	3d 83       	std	Y+5, r19	; 0x05
     294:	2c 83       	std	Y+4, r18	; 0x04
     296:	8c 81       	ldd	r24, Y+4	; 0x04
     298:	9d 81       	ldd	r25, Y+5	; 0x05
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 05       	cpc	r25, r1
     29e:	09 f4       	brne	.+2      	; 0x2a2 <GPIO_writePin+0x3a>
     2a0:	43 c0       	rjmp	.+134    	; 0x328 <GPIO_writePin+0xc0>
     2a2:	2c 81       	ldd	r18, Y+4	; 0x04
     2a4:	3d 81       	ldd	r19, Y+5	; 0x05
     2a6:	22 30       	cpi	r18, 0x02	; 2
     2a8:	31 05       	cpc	r19, r1
     2aa:	2c f4       	brge	.+10     	; 0x2b6 <GPIO_writePin+0x4e>
     2ac:	8c 81       	ldd	r24, Y+4	; 0x04
     2ae:	9d 81       	ldd	r25, Y+5	; 0x05
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	71 f0       	breq	.+28     	; 0x2d0 <GPIO_writePin+0x68>
     2b4:	bc c0       	rjmp	.+376    	; 0x42e <GPIO_writePin+0x1c6>
     2b6:	2c 81       	ldd	r18, Y+4	; 0x04
     2b8:	3d 81       	ldd	r19, Y+5	; 0x05
     2ba:	22 30       	cpi	r18, 0x02	; 2
     2bc:	31 05       	cpc	r19, r1
     2be:	09 f4       	brne	.+2      	; 0x2c2 <GPIO_writePin+0x5a>
     2c0:	5f c0       	rjmp	.+190    	; 0x380 <GPIO_writePin+0x118>
     2c2:	8c 81       	ldd	r24, Y+4	; 0x04
     2c4:	9d 81       	ldd	r25, Y+5	; 0x05
     2c6:	83 30       	cpi	r24, 0x03	; 3
     2c8:	91 05       	cpc	r25, r1
     2ca:	09 f4       	brne	.+2      	; 0x2ce <GPIO_writePin+0x66>
     2cc:	85 c0       	rjmp	.+266    	; 0x3d8 <GPIO_writePin+0x170>
     2ce:	af c0       	rjmp	.+350    	; 0x42e <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
     2d0:	8b 81       	ldd	r24, Y+3	; 0x03
     2d2:	88 23       	and	r24, r24
     2d4:	a9 f4       	brne	.+42     	; 0x300 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
     2d6:	ab e3       	ldi	r26, 0x3B	; 59
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	eb e3       	ldi	r30, 0x3B	; 59
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	48 2f       	mov	r20, r24
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	28 2f       	mov	r18, r24
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	02 2e       	mov	r0, r18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_writePin+0x8c>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	0a 94       	dec	r0
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_writePin+0x88>
     2f8:	80 95       	com	r24
     2fa:	84 23       	and	r24, r20
     2fc:	8c 93       	st	X, r24
     2fe:	97 c0       	rjmp	.+302    	; 0x42e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
     300:	ab e3       	ldi	r26, 0x3B	; 59
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	eb e3       	ldi	r30, 0x3B	; 59
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	48 2f       	mov	r20, r24
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_writePin+0xb6>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_writePin+0xb2>
     322:	84 2b       	or	r24, r20
     324:	8c 93       	st	X, r24
     326:	83 c0       	rjmp	.+262    	; 0x42e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
     328:	8b 81       	ldd	r24, Y+3	; 0x03
     32a:	88 23       	and	r24, r24
     32c:	a9 f4       	brne	.+42     	; 0x358 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
     32e:	a8 e3       	ldi	r26, 0x38	; 56
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e8 e3       	ldi	r30, 0x38	; 56
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	48 2f       	mov	r20, r24
     33a:	8a 81       	ldd	r24, Y+2	; 0x02
     33c:	28 2f       	mov	r18, r24
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	02 2e       	mov	r0, r18
     346:	02 c0       	rjmp	.+4      	; 0x34c <GPIO_writePin+0xe4>
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	0a 94       	dec	r0
     34e:	e2 f7       	brpl	.-8      	; 0x348 <GPIO_writePin+0xe0>
     350:	80 95       	com	r24
     352:	84 23       	and	r24, r20
     354:	8c 93       	st	X, r24
     356:	6b c0       	rjmp	.+214    	; 0x42e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
     358:	a8 e3       	ldi	r26, 0x38	; 56
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	e8 e3       	ldi	r30, 0x38	; 56
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	80 81       	ld	r24, Z
     362:	48 2f       	mov	r20, r24
     364:	8a 81       	ldd	r24, Y+2	; 0x02
     366:	28 2f       	mov	r18, r24
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	02 2e       	mov	r0, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <GPIO_writePin+0x10e>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <GPIO_writePin+0x10a>
     37a:	84 2b       	or	r24, r20
     37c:	8c 93       	st	X, r24
     37e:	57 c0       	rjmp	.+174    	; 0x42e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	88 23       	and	r24, r24
     384:	a9 f4       	brne	.+42     	; 0x3b0 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
     386:	a5 e3       	ldi	r26, 0x35	; 53
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	e5 e3       	ldi	r30, 0x35	; 53
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	48 2f       	mov	r20, r24
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	28 2f       	mov	r18, r24
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 2e       	mov	r0, r18
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <GPIO_writePin+0x13c>
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <GPIO_writePin+0x138>
     3a8:	80 95       	com	r24
     3aa:	84 23       	and	r24, r20
     3ac:	8c 93       	st	X, r24
     3ae:	3f c0       	rjmp	.+126    	; 0x42e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
     3b0:	a5 e3       	ldi	r26, 0x35	; 53
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	e5 e3       	ldi	r30, 0x35	; 53
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	48 2f       	mov	r20, r24
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	02 2e       	mov	r0, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <GPIO_writePin+0x166>
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	0a 94       	dec	r0
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <GPIO_writePin+0x162>
     3d2:	84 2b       	or	r24, r20
     3d4:	8c 93       	st	X, r24
     3d6:	2b c0       	rjmp	.+86     	; 0x42e <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	88 23       	and	r24, r24
     3dc:	a9 f4       	brne	.+42     	; 0x408 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
     3de:	a2 e3       	ldi	r26, 0x32	; 50
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e2 e3       	ldi	r30, 0x32	; 50
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	48 2f       	mov	r20, r24
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	28 2f       	mov	r18, r24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 2e       	mov	r0, r18
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <GPIO_writePin+0x194>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <GPIO_writePin+0x190>
     400:	80 95       	com	r24
     402:	84 23       	and	r24, r20
     404:	8c 93       	st	X, r24
     406:	13 c0       	rjmp	.+38     	; 0x42e <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
     408:	a2 e3       	ldi	r26, 0x32	; 50
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e2 e3       	ldi	r30, 0x32	; 50
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	48 2f       	mov	r20, r24
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	28 2f       	mov	r18, r24
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 2e       	mov	r0, r18
     420:	02 c0       	rjmp	.+4      	; 0x426 <GPIO_writePin+0x1be>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	0a 94       	dec	r0
     428:	e2 f7       	brpl	.-8      	; 0x422 <GPIO_writePin+0x1ba>
     42a:	84 2b       	or	r24, r20
     42c:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	cf 91       	pop	r28
     43a:	df 91       	pop	r29
     43c:	08 95       	ret

0000043e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     43e:	df 93       	push	r29
     440:	cf 93       	push	r28
     442:	00 d0       	rcall	.+0      	; 0x444 <GPIO_readPin+0x6>
     444:	00 d0       	rcall	.+0      	; 0x446 <GPIO_readPin+0x8>
     446:	0f 92       	push	r0
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	8a 83       	std	Y+2, r24	; 0x02
     44e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
     450:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	08 f0       	brcs	.+2      	; 0x45a <GPIO_readPin+0x1c>
     458:	84 c0       	rjmp	.+264    	; 0x562 <GPIO_readPin+0x124>
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	88 30       	cpi	r24, 0x08	; 8
     45e:	08 f0       	brcs	.+2      	; 0x462 <GPIO_readPin+0x24>
     460:	80 c0       	rjmp	.+256    	; 0x562 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	28 2f       	mov	r18, r24
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	3d 83       	std	Y+5, r19	; 0x05
     46a:	2c 83       	std	Y+4, r18	; 0x04
     46c:	4c 81       	ldd	r20, Y+4	; 0x04
     46e:	5d 81       	ldd	r21, Y+5	; 0x05
     470:	41 30       	cpi	r20, 0x01	; 1
     472:	51 05       	cpc	r21, r1
     474:	79 f1       	breq	.+94     	; 0x4d4 <GPIO_readPin+0x96>
     476:	8c 81       	ldd	r24, Y+4	; 0x04
     478:	9d 81       	ldd	r25, Y+5	; 0x05
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	34 f4       	brge	.+12     	; 0x48c <GPIO_readPin+0x4e>
     480:	2c 81       	ldd	r18, Y+4	; 0x04
     482:	3d 81       	ldd	r19, Y+5	; 0x05
     484:	21 15       	cp	r18, r1
     486:	31 05       	cpc	r19, r1
     488:	69 f0       	breq	.+26     	; 0x4a4 <GPIO_readPin+0x66>
     48a:	6b c0       	rjmp	.+214    	; 0x562 <GPIO_readPin+0x124>
     48c:	4c 81       	ldd	r20, Y+4	; 0x04
     48e:	5d 81       	ldd	r21, Y+5	; 0x05
     490:	42 30       	cpi	r20, 0x02	; 2
     492:	51 05       	cpc	r21, r1
     494:	b9 f1       	breq	.+110    	; 0x504 <GPIO_readPin+0xc6>
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	9d 81       	ldd	r25, Y+5	; 0x05
     49a:	83 30       	cpi	r24, 0x03	; 3
     49c:	91 05       	cpc	r25, r1
     49e:	09 f4       	brne	.+2      	; 0x4a2 <GPIO_readPin+0x64>
     4a0:	49 c0       	rjmp	.+146    	; 0x534 <GPIO_readPin+0xf6>
     4a2:	5f c0       	rjmp	.+190    	; 0x562 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     4a4:	e9 e3       	ldi	r30, 0x39	; 57
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	80 81       	ld	r24, Z
     4aa:	28 2f       	mov	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	a9 01       	movw	r20, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <GPIO_readPin+0x7e>
     4b8:	55 95       	asr	r21
     4ba:	47 95       	ror	r20
     4bc:	8a 95       	dec	r24
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <GPIO_readPin+0x7a>
     4c0:	ca 01       	movw	r24, r20
     4c2:	81 70       	andi	r24, 0x01	; 1
     4c4:	90 70       	andi	r25, 0x00	; 0
     4c6:	88 23       	and	r24, r24
     4c8:	19 f0       	breq	.+6      	; 0x4d0 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	89 83       	std	Y+1, r24	; 0x01
     4ce:	49 c0       	rjmp	.+146    	; 0x562 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     4d0:	19 82       	std	Y+1, r1	; 0x01
     4d2:	47 c0       	rjmp	.+142    	; 0x562 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     4d4:	e6 e3       	ldi	r30, 0x36	; 54
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	28 2f       	mov	r18, r24
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a9 01       	movw	r20, r18
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_readPin+0xae>
     4e8:	55 95       	asr	r21
     4ea:	47 95       	ror	r20
     4ec:	8a 95       	dec	r24
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_readPin+0xaa>
     4f0:	ca 01       	movw	r24, r20
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	90 70       	andi	r25, 0x00	; 0
     4f6:	88 23       	and	r24, r24
     4f8:	19 f0       	breq	.+6      	; 0x500 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	31 c0       	rjmp	.+98     	; 0x562 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	2f c0       	rjmp	.+94     	; 0x562 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     504:	e3 e3       	ldi	r30, 0x33	; 51
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	88 2f       	mov	r24, r24
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a9 01       	movw	r20, r18
     516:	02 c0       	rjmp	.+4      	; 0x51c <GPIO_readPin+0xde>
     518:	55 95       	asr	r21
     51a:	47 95       	ror	r20
     51c:	8a 95       	dec	r24
     51e:	e2 f7       	brpl	.-8      	; 0x518 <GPIO_readPin+0xda>
     520:	ca 01       	movw	r24, r20
     522:	81 70       	andi	r24, 0x01	; 1
     524:	90 70       	andi	r25, 0x00	; 0
     526:	88 23       	and	r24, r24
     528:	19 f0       	breq	.+6      	; 0x530 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	89 83       	std	Y+1, r24	; 0x01
     52e:	19 c0       	rjmp	.+50     	; 0x562 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     530:	19 82       	std	Y+1, r1	; 0x01
     532:	17 c0       	rjmp	.+46     	; 0x562 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     534:	e0 e3       	ldi	r30, 0x30	; 48
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a9 01       	movw	r20, r18
     546:	02 c0       	rjmp	.+4      	; 0x54c <GPIO_readPin+0x10e>
     548:	55 95       	asr	r21
     54a:	47 95       	ror	r20
     54c:	8a 95       	dec	r24
     54e:	e2 f7       	brpl	.-8      	; 0x548 <GPIO_readPin+0x10a>
     550:	ca 01       	movw	r24, r20
     552:	81 70       	andi	r24, 0x01	; 1
     554:	90 70       	andi	r25, 0x00	; 0
     556:	88 23       	and	r24, r24
     558:	19 f0       	breq	.+6      	; 0x560 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	01 c0       	rjmp	.+2      	; 0x562 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     560:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
     562:	89 81       	ldd	r24, Y+1	; 0x01
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	cf 91       	pop	r28
     570:	df 91       	pop	r29
     572:	08 95       	ret

00000574 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	00 d0       	rcall	.+0      	; 0x57a <GPIO_setupPortDirection+0x6>
     57a:	00 d0       	rcall	.+0      	; 0x57c <GPIO_setupPortDirection+0x8>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	90 f5       	brcc	.+100    	; 0x5ee <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	3c 83       	std	Y+4, r19	; 0x04
     592:	2b 83       	std	Y+3, r18	; 0x03
     594:	8b 81       	ldd	r24, Y+3	; 0x03
     596:	9c 81       	ldd	r25, Y+4	; 0x04
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	91 05       	cpc	r25, r1
     59c:	d1 f0       	breq	.+52     	; 0x5d2 <GPIO_setupPortDirection+0x5e>
     59e:	2b 81       	ldd	r18, Y+3	; 0x03
     5a0:	3c 81       	ldd	r19, Y+4	; 0x04
     5a2:	22 30       	cpi	r18, 0x02	; 2
     5a4:	31 05       	cpc	r19, r1
     5a6:	2c f4       	brge	.+10     	; 0x5b2 <GPIO_setupPortDirection+0x3e>
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <GPIO_setupPortDirection+0x54>
     5b0:	1e c0       	rjmp	.+60     	; 0x5ee <GPIO_setupPortDirection+0x7a>
     5b2:	2b 81       	ldd	r18, Y+3	; 0x03
     5b4:	3c 81       	ldd	r19, Y+4	; 0x04
     5b6:	22 30       	cpi	r18, 0x02	; 2
     5b8:	31 05       	cpc	r19, r1
     5ba:	81 f0       	breq	.+32     	; 0x5dc <GPIO_setupPortDirection+0x68>
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	83 30       	cpi	r24, 0x03	; 3
     5c2:	91 05       	cpc	r25, r1
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <GPIO_setupPortDirection+0x72>
     5c6:	13 c0       	rjmp	.+38     	; 0x5ee <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
     5c8:	ea e3       	ldi	r30, 0x3A	; 58
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	80 83       	st	Z, r24
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
     5d2:	e7 e3       	ldi	r30, 0x37	; 55
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	80 83       	st	Z, r24
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
     5dc:	e4 e3       	ldi	r30, 0x34	; 52
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	80 83       	st	Z, r24
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
     5e6:	e1 e3       	ldi	r30, 0x31	; 49
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	00 d0       	rcall	.+0      	; 0x602 <GPIO_writePort+0x6>
     602:	00 d0       	rcall	.+0      	; 0x604 <GPIO_writePort+0x8>
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	85 30       	cpi	r24, 0x05	; 5
     610:	90 f5       	brcc	.+100    	; 0x676 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	3c 83       	std	Y+4, r19	; 0x04
     61a:	2b 83       	std	Y+3, r18	; 0x03
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	91 05       	cpc	r25, r1
     624:	d1 f0       	breq	.+52     	; 0x65a <GPIO_writePort+0x5e>
     626:	2b 81       	ldd	r18, Y+3	; 0x03
     628:	3c 81       	ldd	r19, Y+4	; 0x04
     62a:	22 30       	cpi	r18, 0x02	; 2
     62c:	31 05       	cpc	r19, r1
     62e:	2c f4       	brge	.+10     	; 0x63a <GPIO_writePort+0x3e>
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	9c 81       	ldd	r25, Y+4	; 0x04
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	61 f0       	breq	.+24     	; 0x650 <GPIO_writePort+0x54>
     638:	1e c0       	rjmp	.+60     	; 0x676 <GPIO_writePort+0x7a>
     63a:	2b 81       	ldd	r18, Y+3	; 0x03
     63c:	3c 81       	ldd	r19, Y+4	; 0x04
     63e:	22 30       	cpi	r18, 0x02	; 2
     640:	31 05       	cpc	r19, r1
     642:	81 f0       	breq	.+32     	; 0x664 <GPIO_writePort+0x68>
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	9c 81       	ldd	r25, Y+4	; 0x04
     648:	83 30       	cpi	r24, 0x03	; 3
     64a:	91 05       	cpc	r25, r1
     64c:	81 f0       	breq	.+32     	; 0x66e <GPIO_writePort+0x72>
     64e:	13 c0       	rjmp	.+38     	; 0x676 <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
     650:	eb e3       	ldi	r30, 0x3B	; 59
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	8a 81       	ldd	r24, Y+2	; 0x02
     656:	80 83       	st	Z, r24
     658:	0e c0       	rjmp	.+28     	; 0x676 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
     65a:	e8 e3       	ldi	r30, 0x38	; 56
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	80 83       	st	Z, r24
     662:	09 c0       	rjmp	.+18     	; 0x676 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
     664:	e5 e3       	ldi	r30, 0x35	; 53
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	80 83       	st	Z, r24
     66c:	04 c0       	rjmp	.+8      	; 0x676 <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
     66e:	e2 e3       	ldi	r30, 0x32	; 50
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	8a 81       	ldd	r24, Y+2	; 0x02
     674:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <GPIO_readPort+0x6>
     68a:	00 d0       	rcall	.+0      	; 0x68c <GPIO_readPort+0x8>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
     692:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	84 30       	cpi	r24, 0x04	; 4
     698:	90 f5       	brcc	.+100    	; 0x6fe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	3c 83       	std	Y+4, r19	; 0x04
     6a2:	2b 83       	std	Y+3, r18	; 0x03
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9c 81       	ldd	r25, Y+4	; 0x04
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	91 05       	cpc	r25, r1
     6ac:	d1 f0       	breq	.+52     	; 0x6e2 <GPIO_readPort+0x5e>
     6ae:	2b 81       	ldd	r18, Y+3	; 0x03
     6b0:	3c 81       	ldd	r19, Y+4	; 0x04
     6b2:	22 30       	cpi	r18, 0x02	; 2
     6b4:	31 05       	cpc	r19, r1
     6b6:	2c f4       	brge	.+10     	; 0x6c2 <GPIO_readPort+0x3e>
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	61 f0       	breq	.+24     	; 0x6d8 <GPIO_readPort+0x54>
     6c0:	1e c0       	rjmp	.+60     	; 0x6fe <GPIO_readPort+0x7a>
     6c2:	2b 81       	ldd	r18, Y+3	; 0x03
     6c4:	3c 81       	ldd	r19, Y+4	; 0x04
     6c6:	22 30       	cpi	r18, 0x02	; 2
     6c8:	31 05       	cpc	r19, r1
     6ca:	81 f0       	breq	.+32     	; 0x6ec <GPIO_readPort+0x68>
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	83 30       	cpi	r24, 0x03	; 3
     6d2:	91 05       	cpc	r25, r1
     6d4:	81 f0       	breq	.+32     	; 0x6f6 <GPIO_readPort+0x72>
     6d6:	13 c0       	rjmp	.+38     	; 0x6fe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
     6d8:	e9 e3       	ldi	r30, 0x39	; 57
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	0e c0       	rjmp	.+28     	; 0x6fe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
     6e2:	e6 e3       	ldi	r30, 0x36	; 54
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
     6ec:	e3 e3       	ldi	r30, 0x33	; 51
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
     6f6:	e0 e3       	ldi	r30, 0x30	; 48
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <__vector_7>:
/**-------------------------Extern Section----------------**/
extern uint8 e_Yellow_Flag;
extern uint8 e_Button_Pushed;
/**-------------------------Interrupts Section----------------------**/
ISR(TIMER1_COMPA_vect)
{
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	2f 93       	push	r18
     71a:	3f 93       	push	r19
     71c:	4f 93       	push	r20
     71e:	5f 93       	push	r21
     720:	6f 93       	push	r22
     722:	7f 93       	push	r23
     724:	8f 93       	push	r24
     726:	9f 93       	push	r25
     728:	af 93       	push	r26
     72a:	bf 93       	push	r27
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrA != NULL_PTR)
     738:	80 91 78 00 	lds	r24, 0x0078
     73c:	90 91 79 00 	lds	r25, 0x0079
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	41 f1       	breq	.+80     	; 0x794 <__vector_7+0x86>
	{
		if(g_callBackPtrB != NULL_PTR)
     744:	80 91 7a 00 	lds	r24, 0x007A
     748:	90 91 7b 00 	lds	r25, 0x007B
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	11 f1       	breq	.+68     	; 0x794 <__vector_7+0x86>
		{
			if(e_Button_Pushed == 1) /* If the Push Button was pressed INT0 */
     750:	80 91 80 00 	lds	r24, 0x0080
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	29 f4       	brne	.+10     	; 0x762 <__vector_7+0x54>
			{
				g_EnterCounter = 6;
     758:	86 e0       	ldi	r24, 0x06	; 6
     75a:	80 93 7c 00 	sts	0x007C, r24
				e_Button_Pushed= 0;
     75e:	10 92 80 00 	sts	0x0080, r1
			}

			if(e_Yellow_Flag == 1) /* To start blinking the yellow LED */
     762:	80 91 7f 00 	lds	r24, 0x007F
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	29 f4       	brne	.+10     	; 0x774 <__vector_7+0x66>
			{
				/* Call the Call Back function in the application after the edge is detected */
				(*g_callBackPtrB)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     76a:	e0 91 7a 00 	lds	r30, 0x007A
     76e:	f0 91 7b 00 	lds	r31, 0x007B
     772:	09 95       	icall
			}

			if(g_EnterCounter == 0 || g_EnterCounter == 6)
     774:	80 91 7c 00 	lds	r24, 0x007C
     778:	88 23       	and	r24, r24
     77a:	21 f0       	breq	.+8      	; 0x784 <__vector_7+0x76>
     77c:	80 91 7c 00 	lds	r24, 0x007C
     780:	86 30       	cpi	r24, 0x06	; 6
     782:	41 f4       	brne	.+16     	; 0x794 <__vector_7+0x86>
			{
				/* Call the Call Back function in the application after the edge is detected */
				(*g_callBackPtrA)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     784:	e0 91 78 00 	lds	r30, 0x0078
     788:	f0 91 79 00 	lds	r31, 0x0079
     78c:	09 95       	icall
				g_EnterCounter = 1; /* Start over again */
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 7c 00 	sts	0x007C, r24
			}
		}
	}
	g_EnterCounter++;
     794:	80 91 7c 00 	lds	r24, 0x007C
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	80 93 7c 00 	sts	0x007C, r24
}
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	ff 91       	pop	r31
     7a4:	ef 91       	pop	r30
     7a6:	bf 91       	pop	r27
     7a8:	af 91       	pop	r26
     7aa:	9f 91       	pop	r25
     7ac:	8f 91       	pop	r24
     7ae:	7f 91       	pop	r23
     7b0:	6f 91       	pop	r22
     7b2:	5f 91       	pop	r21
     7b4:	4f 91       	pop	r20
     7b6:	3f 91       	pop	r19
     7b8:	2f 91       	pop	r18
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62

}
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(TIMER1_ConfigType *Config_Ptr)
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <Timer1_Init+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
		/* Compare Output Mode for channel A */
		TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
     7f2:	af e4       	ldi	r26, 0x4F	; 79
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ef e4       	ldi	r30, 0x4F	; 79
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	28 2f       	mov	r18, r24
     7fe:	2f 73       	andi	r18, 0x3F	; 63
     800:	e9 81       	ldd	r30, Y+1	; 0x01
     802:	fa 81       	ldd	r31, Y+2	; 0x02
     804:	80 81       	ld	r24, Z
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	00 24       	eor	r0, r0
     80c:	96 95       	lsr	r25
     80e:	87 95       	ror	r24
     810:	07 94       	ror	r0
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	07 94       	ror	r0
     818:	98 2f       	mov	r25, r24
     81a:	80 2d       	mov	r24, r0
     81c:	82 2b       	or	r24, r18
     81e:	8c 93       	st	X, r24

		/* Compare Output Mode for channel B */
		TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
     820:	af e4       	ldi	r26, 0x4F	; 79
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	ef e4       	ldi	r30, 0x4F	; 79
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	28 2f       	mov	r18, r24
     82c:	2f 7c       	andi	r18, 0xCF	; 207
     82e:	e9 81       	ldd	r30, Y+1	; 0x01
     830:	fa 81       	ldd	r31, Y+2	; 0x02
     832:	81 81       	ldd	r24, Z+1	; 0x01
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	82 95       	swap	r24
     83a:	92 95       	swap	r25
     83c:	90 7f       	andi	r25, 0xF0	; 240
     83e:	98 27       	eor	r25, r24
     840:	80 7f       	andi	r24, 0xF0	; 240
     842:	98 27       	eor	r25, r24
     844:	82 2b       	or	r24, r18
     846:	8c 93       	st	X, r24

		/* Force Output Compare for Channel A */
		TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
     848:	af e4       	ldi	r26, 0x4F	; 79
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	ef e4       	ldi	r30, 0x4F	; 79
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	28 2f       	mov	r18, r24
     854:	27 7f       	andi	r18, 0xF7	; 247
     856:	e9 81       	ldd	r30, Y+1	; 0x01
     858:	fa 81       	ldd	r31, Y+2	; 0x02
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	82 2b       	or	r24, r18
     86e:	8c 93       	st	X, r24

		/* Force Output Compare for Channel B */
		TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
     870:	af e4       	ldi	r26, 0x4F	; 79
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	ef e4       	ldi	r30, 0x4F	; 79
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	28 2f       	mov	r18, r24
     87c:	2b 7f       	andi	r18, 0xFB	; 251
     87e:	e9 81       	ldd	r30, Y+1	; 0x01
     880:	fa 81       	ldd	r31, Y+2	; 0x02
     882:	83 81       	ldd	r24, Z+3	; 0x03
     884:	88 2f       	mov	r24, r24
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	82 2b       	or	r24, r18
     892:	8c 93       	st	X, r24

		/* Setting the waveform */
		TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
     894:	af e4       	ldi	r26, 0x4F	; 79
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	ef e4       	ldi	r30, 0x4F	; 79
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	28 2f       	mov	r18, r24
     8a0:	2c 7f       	andi	r18, 0xFC	; 252
     8a2:	e9 81       	ldd	r30, Y+1	; 0x01
     8a4:	fa 81       	ldd	r31, Y+2	; 0x02
     8a6:	87 81       	ldd	r24, Z+7	; 0x07
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	00 24       	eor	r0, r0
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	07 94       	ror	r0
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	07 94       	ror	r0
     8ba:	98 2f       	mov	r25, r24
     8bc:	80 2d       	mov	r24, r0
     8be:	08 2e       	mov	r0, r24
     8c0:	89 2f       	mov	r24, r25
     8c2:	00 0c       	add	r0, r0
     8c4:	88 1f       	adc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	00 0c       	add	r0, r0
     8ca:	88 1f       	adc	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	82 2b       	or	r24, r18
     8d0:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
     8d2:	ae e4       	ldi	r26, 0x4E	; 78
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	ee e4       	ldi	r30, 0x4E	; 78
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	28 2f       	mov	r18, r24
     8de:	27 7e       	andi	r18, 0xE7	; 231
     8e0:	e9 81       	ldd	r30, Y+1	; 0x01
     8e2:	fa 81       	ldd	r31, Y+2	; 0x02
     8e4:	87 81       	ldd	r24, Z+7	; 0x07
     8e6:	86 95       	lsr	r24
     8e8:	86 95       	lsr	r24
     8ea:	88 2f       	mov	r24, r24
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	82 2b       	or	r24, r18
     8fc:	8c 93       	st	X, r24

		/* Noise Canceler */
		TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
     8fe:	ae e4       	ldi	r26, 0x4E	; 78
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	ee e4       	ldi	r30, 0x4E	; 78
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	28 2f       	mov	r18, r24
     90a:	2f 77       	andi	r18, 0x7F	; 127
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	85 81       	ldd	r24, Z+5	; 0x05
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	96 95       	lsr	r25
     918:	98 2f       	mov	r25, r24
     91a:	88 27       	eor	r24, r24
     91c:	97 95       	ror	r25
     91e:	87 95       	ror	r24
     920:	82 2b       	or	r24, r18
     922:	8c 93       	st	X, r24

		/* Edge Select */
		TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
     924:	ae e4       	ldi	r26, 0x4E	; 78
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	ee e4       	ldi	r30, 0x4E	; 78
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	28 2f       	mov	r18, r24
     930:	2f 7b       	andi	r18, 0xBF	; 191
     932:	e9 81       	ldd	r30, Y+1	; 0x01
     934:	fa 81       	ldd	r31, Y+2	; 0x02
     936:	84 81       	ldd	r24, Z+4	; 0x04
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	00 24       	eor	r0, r0
     93e:	96 95       	lsr	r25
     940:	87 95       	ror	r24
     942:	07 94       	ror	r0
     944:	96 95       	lsr	r25
     946:	87 95       	ror	r24
     948:	07 94       	ror	r0
     94a:	98 2f       	mov	r25, r24
     94c:	80 2d       	mov	r24, r0
     94e:	82 2b       	or	r24, r18
     950:	8c 93       	st	X, r24

		/* Clock Selection */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
     952:	ae e4       	ldi	r26, 0x4E	; 78
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ee e4       	ldi	r30, 0x4E	; 78
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	98 2f       	mov	r25, r24
     95e:	98 7f       	andi	r25, 0xF8	; 248
     960:	e9 81       	ldd	r30, Y+1	; 0x01
     962:	fa 81       	ldd	r31, Y+2	; 0x02
     964:	86 81       	ldd	r24, Z+6	; 0x06
     966:	89 2b       	or	r24, r25
     968:	8c 93       	st	X, r24

		/* Enable compare A interrupt */
		TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
     96a:	a9 e5       	ldi	r26, 0x59	; 89
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	e9 e5       	ldi	r30, 0x59	; 89
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	28 2f       	mov	r18, r24
     976:	2f 7e       	andi	r18, 0xEF	; 239
     978:	e9 81       	ldd	r30, Y+1	; 0x01
     97a:	fa 81       	ldd	r31, Y+2	; 0x02
     97c:	80 85       	ldd	r24, Z+8	; 0x08
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	82 95       	swap	r24
     984:	92 95       	swap	r25
     986:	90 7f       	andi	r25, 0xF0	; 240
     988:	98 27       	eor	r25, r24
     98a:	80 7f       	andi	r24, 0xF0	; 240
     98c:	98 27       	eor	r25, r24
     98e:	82 2b       	or	r24, r18
     990:	8c 93       	st	X, r24

		/* Enable compare B interrupt */
		TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
     992:	a9 e5       	ldi	r26, 0x59	; 89
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e9 e5       	ldi	r30, 0x59	; 89
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	28 2f       	mov	r18, r24
     99e:	27 7f       	andi	r18, 0xF7	; 247
     9a0:	e9 81       	ldd	r30, Y+1	; 0x01
     9a2:	fa 81       	ldd	r31, Y+2	; 0x02
     9a4:	81 85       	ldd	r24, Z+9	; 0x09
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	82 2b       	or	r24, r18
     9b8:	8c 93       	st	X, r24

		/* Enable OverFlow interrupt */
		TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
     9ba:	a9 e5       	ldi	r26, 0x59	; 89
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e9 e5       	ldi	r30, 0x59	; 89
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	28 2f       	mov	r18, r24
     9c6:	2b 7f       	andi	r18, 0xFB	; 251
     9c8:	e9 81       	ldd	r30, Y+1	; 0x01
     9ca:	fa 81       	ldd	r31, Y+2	; 0x02
     9cc:	82 85       	ldd	r24, Z+10	; 0x0a
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	82 2b       	or	r24, r18
     9dc:	8c 93       	st	X, r24

		/* Initial Value for Timer1 */
		TCNT1 = Config_Ptr->TCNT1_Value;
     9de:	ac e4       	ldi	r26, 0x4C	; 76
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e9 81       	ldd	r30, Y+1	; 0x01
     9e4:	fa 81       	ldd	r31, Y+2	; 0x02
     9e6:	83 85       	ldd	r24, Z+11	; 0x0b
     9e8:	94 85       	ldd	r25, Z+12	; 0x0c
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24

		/* Initializing the compare value register */
		OCR1A = Config_Ptr->OCR1A_Value;
     9f0:	aa e4       	ldi	r26, 0x4A	; 74
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	e9 81       	ldd	r30, Y+1	; 0x01
     9f6:	fa 81       	ldd	r31, Y+2	; 0x02
     9f8:	85 85       	ldd	r24, Z+13	; 0x0d
     9fa:	96 85       	ldd	r25, Z+14	; 0x0e
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	9c 93       	st	X, r25
     a00:	8e 93       	st	-X, r24
		OCR1B = Config_Ptr->OCR1B_Value;
     a02:	a8 e4       	ldi	r26, 0x48	; 72
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e9 81       	ldd	r30, Y+1	; 0x01
     a08:	fa 81       	ldd	r31, Y+2	; 0x02
     a0a:	87 85       	ldd	r24, Z+15	; 0x0f
     a0c:	90 89       	ldd	r25, Z+16	; 0x10
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	9c 93       	st	X, r25
     a12:	8e 93       	st	-X, r24
}
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	08 95       	ret

00000a1e <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(TIMER0_ConfigType *Config_Ptr)
{
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	00 d0       	rcall	.+0      	; 0xa24 <Timer0_PWM_Init+0x6>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
     a2c:	e2 e5       	ldi	r30, 0x52	; 82
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	63 e0       	ldi	r22, 0x03	; 3
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
     a3c:	e3 e5       	ldi	r30, 0x53	; 83
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	88 e6       	ldi	r24, 0x68	; 104
     a42:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->prescaler;
     a44:	a3 e5       	ldi	r26, 0x53	; 83
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e3 e5       	ldi	r30, 0x53	; 83
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	90 81       	ld	r25, Z
     a4e:	e9 81       	ldd	r30, Y+1	; 0x01
     a50:	fa 81       	ldd	r31, Y+2	; 0x02
     a52:	80 81       	ld	r24, Z
     a54:	89 2b       	or	r24, r25
     a56:	8c 93       	st	X, r24
}
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	00 d0       	rcall	.+0      	; 0xa68 <Timer0_PWM_Activate+0x6>
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	9a 83       	std	Y+2, r25	; 0x02
     a6e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
     a70:	e2 e5       	ldi	r30, 0x52	; 82
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
     a76:	ac e5       	ldi	r26, 0x5C	; 92
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	80 81       	ld	r24, Z
     a80:	8c 93       	st	X, r24
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <Timer1_setCallBackOneA>:

/*----------------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackOneA(void(*a_ptr)(void))
{
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	00 d0       	rcall	.+0      	; 0xa92 <Timer1_setCallBackOneA+0x6>
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	9a 83       	std	Y+2, r25	; 0x02
     a98:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrA = a_ptr;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	90 93 79 00 	sts	0x0079, r25
     aa2:	80 93 78 00 	sts	0x0078, r24
}
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	cf 91       	pop	r28
     aac:	df 91       	pop	r29
     aae:	08 95       	ret

00000ab0 <Timer1_setCallBackOneB>:
/*----------------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackOneB(void(*a_ptr)(void))
{
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <Timer1_setCallBackOneB+0x6>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrB = a_ptr;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	90 93 7b 00 	sts	0x007B, r25
     ac6:	80 93 7a 00 	sts	0x007A, r24
}
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	cf 91       	pop	r28
     ad0:	df 91       	pop	r29
     ad2:	08 95       	ret

00000ad4 <TL_Init>:

/*
 * Description Initializing the traffic light
 */
void TL_Init(void)
{
     ad4:	df 93       	push	r29
     ad6:	cf 93       	push	r28
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	a1 97       	sbiw	r28, 0x21	; 33
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
	/* Setting up pins direction */
	/* Setting car led pins */
	GPIO_setupPinDirection(CAR_PORT_ID, CAR_GREEN_LED_ID, PIN_OUTPUT);
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(CAR_PORT_ID, CAR_YELLOW_LED_ID, PIN_OUTPUT);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(CAR_PORT_ID, CAR_RED_LED_ID, PIN_OUTPUT);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	62 e0       	ldi	r22, 0x02	; 2
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

	/* Setting passenger traffic light pins */
	GPIO_setupPinDirection(PEDESTRIAN_PORT_ID, PEDESTRIAN_GREEN_ID, PIN_OUTPUT);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, PIN_OUTPUT);
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PEDESTRIAN_PORT_ID, PEDESTRIAN_RED_ID, PIN_OUTPUT);
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	62 e0       	ldi	r22, 0x02	; 2
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>
	 	 *  TCNT1_Value : 4850
	 	 *  OCR1A_Value : 4883
	 	 *  OCR1B_Value : ---
	 */

		TIMER1_ConfigType Timer1_Config={Normal_A,Normal_B,Channel_A_ON,Channel_B_OFF,TIMER1_FALLING_EDGE,NOISE_CANCELER_OFF,F_TIMER11024,CTC_OCR1A,ENABLE_INTERRUPT,DISABLE_INTERRUPT,DISABLE_INTERRUPT,970,976,0};
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	99 8f       	std	Y+25, r25	; 0x19
     b2a:	88 8f       	std	Y+24, r24	; 0x18
     b2c:	e6 e6       	ldi	r30, 0x66	; 102
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	fb 8f       	std	Y+27, r31	; 0x1b
     b32:	ea 8f       	std	Y+26, r30	; 0x1a
     b34:	f1 e1       	ldi	r31, 0x11	; 17
     b36:	fc 8f       	std	Y+28, r31	; 0x1c
     b38:	ea 8d       	ldd	r30, Y+26	; 0x1a
     b3a:	fb 8d       	ldd	r31, Y+27	; 0x1b
     b3c:	00 80       	ld	r0, Z
     b3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b40:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	9b 8f       	std	Y+27, r25	; 0x1b
     b46:	8a 8f       	std	Y+26, r24	; 0x1a
     b48:	e8 8d       	ldd	r30, Y+24	; 0x18
     b4a:	f9 8d       	ldd	r31, Y+25	; 0x19
     b4c:	00 82       	st	Z, r0
     b4e:	88 8d       	ldd	r24, Y+24	; 0x18
     b50:	99 8d       	ldd	r25, Y+25	; 0x19
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	99 8f       	std	Y+25, r25	; 0x19
     b56:	88 8f       	std	Y+24, r24	; 0x18
     b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b5a:	91 50       	subi	r25, 0x01	; 1
     b5c:	9c 8f       	std	Y+28, r25	; 0x1c
     b5e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     b60:	ee 23       	and	r30, r30
     b62:	51 f7       	brne	.-44     	; 0xb38 <TL_Init+0x64>
		Timer1_Init(&Timer1_Config);
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <Timer1_Init>

		/* Initializing the call back function */
		Timer1_setCallBackOneA(TL_NormalSystemISR);
     b6c:	87 e3       	ldi	r24, 0x37	; 55
     b6e:	96 e0       	ldi	r25, 0x06	; 6
     b70:	0e 94 46 05 	call	0xa8c	; 0xa8c <Timer1_setCallBackOneA>
		Timer1_setCallBackOneB(TL_YellowBlinking);
     b74:	82 e1       	ldi	r24, 0x12	; 18
     b76:	96 e0       	ldi	r25, 0x06	; 6
     b78:	0e 94 58 05 	call	0xab0	; 0xab0 <Timer1_setCallBackOneB>
			 * controlZero :		Rising
			 * controlOne  :		----
			 * controlTwo  :		----
			 *
		 */
			INT_ConfigType INT_Config = {INT0_ENABLE,INT1_DISABLE,INT2_DISABLE,RISING_EDGE,0,0};
     b7c:	ce 01       	movw	r24, r28
     b7e:	42 96       	adiw	r24, 0x12	; 18
     b80:	9e 8f       	std	Y+30, r25	; 0x1e
     b82:	8d 8f       	std	Y+29, r24	; 0x1d
     b84:	e0 e6       	ldi	r30, 0x60	; 96
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	f8 a3       	std	Y+32, r31	; 0x20
     b8a:	ef 8f       	std	Y+31, r30	; 0x1f
     b8c:	f6 e0       	ldi	r31, 0x06	; 6
     b8e:	f9 a3       	std	Y+33, r31	; 0x21
     b90:	ef 8d       	ldd	r30, Y+31	; 0x1f
     b92:	f8 a1       	ldd	r31, Y+32	; 0x20
     b94:	00 80       	ld	r0, Z
     b96:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b98:	98 a1       	ldd	r25, Y+32	; 0x20
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	98 a3       	std	Y+32, r25	; 0x20
     b9e:	8f 8f       	std	Y+31, r24	; 0x1f
     ba0:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ba2:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ba4:	00 82       	st	Z, r0
     ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	9e 8f       	std	Y+30, r25	; 0x1e
     bae:	8d 8f       	std	Y+29, r24	; 0x1d
     bb0:	99 a1       	ldd	r25, Y+33	; 0x21
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	99 a3       	std	Y+33, r25	; 0x21
     bb6:	e9 a1       	ldd	r30, Y+33	; 0x21
     bb8:	ee 23       	and	r30, r30
     bba:	51 f7       	brne	.-44     	; 0xb90 <TL_Init+0xbc>
			INT0_Init(&INT_Config);
     bbc:	ce 01       	movw	r24, r28
     bbe:	42 96       	adiw	r24, 0x12	; 18
     bc0:	0e 94 7a 07 	call	0xef4	; 0xef4 <INT0_Init>

			INT0_setCallBack(TL_PedestrianISR);
     bc4:	8f ee       	ldi	r24, 0xEF	; 239
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	0e 94 22 08 	call	0x1044	; 0x1044 <INT0_setCallBack>
}
     bcc:	a1 96       	adiw	r28, 0x21	; 33
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <TL_PedestrianISR>:
/*
 * Description:
 * Used by the Pedestrian button
 */
void TL_PedestrianISR(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	if(ColorState == Yellow_2) /* If the traffic car is Red do nothing */
     be6:	80 91 7d 00 	lds	r24, 0x007D
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	c1 f0       	breq	.+48     	; 0xc1e <TL_PedestrianISR+0x40>
	{
		/* Nothing to do */
	}
	else if(ColorState == Yellow_1 || ColorState == Green || ColorState == Red) /* This is the next state, which means if the car is right now is green or yellow */
     bee:	80 91 7d 00 	lds	r24, 0x007D
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	41 f0       	breq	.+16     	; 0xc06 <TL_PedestrianISR+0x28>
     bf6:	80 91 7d 00 	lds	r24, 0x007D
     bfa:	88 23       	and	r24, r24
     bfc:	21 f0       	breq	.+8      	; 0xc06 <TL_PedestrianISR+0x28>
     bfe:	80 91 7d 00 	lds	r24, 0x007D
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	61 f4       	brne	.+24     	; 0xc1e <TL_PedestrianISR+0x40>
	{
		/* Start from yellow sign */
		ColorState = Yellow_1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 7d 00 	sts	0x007D, r24
		e_Button_Pushed =1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 80 00 	sts	0x0080, r24
		TCNT1 = 970;
     c12:	ec e4       	ldi	r30, 0x4C	; 76
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8a ec       	ldi	r24, 0xCA	; 202
     c18:	93 e0       	ldi	r25, 0x03	; 3
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	80 83       	st	Z, r24
	}
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <TL_YellowBlinking>:
/*
 * Description:
 * Yellow Blinking
 */
void TL_YellowBlinking(void)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	if(g_Flag == 0)
     c2c:	80 91 7e 00 	lds	r24, 0x007E
     c30:	88 23       	and	r24, r24
     c32:	71 f4       	brne	.+28     	; 0xc50 <TL_YellowBlinking+0x2c>
	{
		GPIO_writePin(CAR_PORT_ID, CAR_YELLOW_LED_ID, LOGIC_LOW);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, LOGIC_LOW);
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		g_Flag = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 7e 00 	sts	0x007E, r24
     c4e:	0c c0       	rjmp	.+24     	; 0xc68 <TL_YellowBlinking+0x44>
	}
	else
	{
		GPIO_writePin(CAR_PORT_ID, CAR_YELLOW_LED_ID, LOGIC_HIGH);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, LOGIC_HIGH);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		g_Flag = 0;
     c64:	10 92 7e 00 	sts	0x007E, r1
	}
}
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <TL_NormalSystemISR>:
/*-------------------------------------------------------------------*/

/* Function will be called every interrupt to handle the passenger request */
void TL_NormalSystemISR(void)
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	/* Setting up the conditions */
	if(ColorState == Green)
     c76:	80 91 7d 00 	lds	r24, 0x007D
     c7a:	88 23       	and	r24, r24
     c7c:	21 f5       	brne	.+72     	; 0xcc6 <TL_NormalSystemISR+0x58>
	{
		/* Activating the CAR Green Color */
		GPIO_writePin(CAR_PORT_ID, CAR_GREEN_LED_ID, LOGIC_HIGH);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_YELLOW_LED_ID, LOGIC_LOW);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_RED_LED_ID, LOGIC_LOW);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Activating the Pedestrian Red Color */
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_GREEN_ID, LOGIC_LOW);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, LOGIC_LOW);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_RED_ID, LOGIC_HIGH);
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Setting the yellow flag to zero */
		e_Yellow_Flag = 0;
     cba:	10 92 7f 00 	sts	0x007F, r1
		/* Switching to Yellow color on the next step */
		ColorState = Yellow_1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 7d 00 	sts	0x007D, r24
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <TL_NormalSystemISR+0x106>
	}
	else if(ColorState == Yellow_1 || ColorState == Yellow_2)
     cc6:	80 91 7d 00 	lds	r24, 0x007D
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	21 f0       	breq	.+8      	; 0xcd6 <TL_NormalSystemISR+0x68>
     cce:	80 91 7d 00 	lds	r24, 0x007D
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	61 f5       	brne	.+88     	; 0xd2e <TL_NormalSystemISR+0xc0>
	{
		/* Activating the CAR yellow Color */
		GPIO_writePin(CAR_PORT_ID, CAR_GREEN_LED_ID, LOGIC_LOW);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_YELLOW_LED_ID, LOGIC_HIGH);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_RED_LED_ID, LOGIC_LOW);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Activating the Pedestrian Red Color */
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_GREEN_ID, LOGIC_LOW);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, LOGIC_HIGH);
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_RED_ID, LOGIC_LOW);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Setting the yellow flag to one */
		e_Yellow_Flag = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 7f 00 	sts	0x007F, r24

		/* Switching to Red color on the next step or back to green if it was on red */
		if(ColorState == Yellow_1)
     d18:	80 91 7d 00 	lds	r24, 0x007D
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	21 f4       	brne	.+8      	; 0xd28 <TL_NormalSystemISR+0xba>
		{
			ColorState = Red;
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	80 93 7d 00 	sts	0x007D, r24
     d26:	26 c0       	rjmp	.+76     	; 0xd74 <TL_NormalSystemISR+0x106>
		}
		else
		{
			ColorState = Green;
     d28:	10 92 7d 00 	sts	0x007D, r1
     d2c:	23 c0       	rjmp	.+70     	; 0xd74 <TL_NormalSystemISR+0x106>
		}
	}
	else
	{
		/* Activating the CAR Red Color */
		GPIO_writePin(CAR_PORT_ID, CAR_GREEN_LED_ID, LOGIC_LOW);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_YELLOW_LED_ID, LOGIC_LOW);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(CAR_PORT_ID, CAR_RED_LED_ID, LOGIC_HIGH);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Activating the Pedestrian Red Color */
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_GREEN_ID, LOGIC_HIGH);
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_YELLOW_ID, LOGIC_LOW);
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>
		GPIO_writePin(PEDESTRIAN_PORT_ID, PEDESTRIAN_RED_ID, LOGIC_LOW);
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	62 e0       	ldi	r22, 0x02	; 2
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	0e 94 34 01 	call	0x268	; 0x268 <GPIO_writePin>

		/* Setting the yellow flag to zero */
		e_Yellow_Flag = 0;
     d6a:	10 92 7f 00 	sts	0x007F, r1

		/* Switching to Green color on the next step */
		ColorState = Yellow_2;
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	80 93 7d 00 	sts	0x007D, r24
	}

	/* Letting the timer to start over again */
	TCNT1 = 0;
     d74:	ec e4       	ldi	r30, 0x4C	; 76
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <Initializer>:

/**-------------------------Function Def Section------------------**/


void Initializer()
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62

	/* Initializing Traffic_Light */
	TL_Init();
     d8a:	0e 94 6a 05 	call	0xad4	; 0xad4 <TL_Init>
	/*-------------------------------------------------------------------*/

	/* Activating  the SREG */
	SREG |= (1<<7);
     d8e:	af e5       	ldi	r26, 0x5F	; 95
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ef e5       	ldi	r30, 0x5F	; 95
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	8c 93       	st	X, r24
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <APP_start>:
/*-------------------------------------------------------------------*/

void APP_start()
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	/* Initializing Everything at first  */
	Initializer();
     daa:	0e 94 c1 06 	call	0xd82	; 0xd82 <Initializer>
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <main>:

/**-------------------------Main Section------------------**/
int main(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	/* Start */
	APP_start();
     dbc:	0e 94 d1 06 	call	0xda2	; 0xda2 <APP_start>
     dc0:	ff cf       	rjmp	.-2      	; 0xdc0 <main+0xc>

00000dc2 <__vector_1>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

/**-------------------------Interrupts Section----------------------**/

ISR(INT0_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	2f 93       	push	r18
     dce:	3f 93       	push	r19
     dd0:	4f 93       	push	r20
     dd2:	5f 93       	push	r21
     dd4:	6f 93       	push	r22
     dd6:	7f 93       	push	r23
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
     ddc:	af 93       	push	r26
     dde:	bf 93       	push	r27
     de0:	ef 93       	push	r30
     de2:	ff 93       	push	r31
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
     dec:	80 91 81 00 	lds	r24, 0x0081
     df0:	90 91 82 00 	lds	r25, 0x0082
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	29 f0       	breq	.+10     	; 0xe02 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     df8:	e0 91 81 00 	lds	r30, 0x0081
     dfc:	f0 91 82 00 	lds	r31, 0x0082
     e00:	09 95       	icall
	}
}
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_2>:
/*-------------------------------------------------------------------*/

ISR(INT1_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     e52:	80 91 83 00 	lds	r24, 0x0083
     e56:	90 91 84 00 	lds	r25, 0x0084
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	29 f0       	breq	.+10     	; 0xe68 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e5e:	e0 91 83 00 	lds	r30, 0x0083
     e62:	f0 91 84 00 	lds	r31, 0x0084
     e66:	09 95       	icall
	}
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_3>:
/*-------------------------------------------------------------------*/

ISR(INT2_vect)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
     eb8:	80 91 85 00 	lds	r24, 0x0085
     ebc:	90 91 86 00 	lds	r25, 0x0086
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	29 f0       	breq	.+10     	; 0xece <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ec4:	e0 91 85 00 	lds	r30, 0x0085
     ec8:	f0 91 86 00 	lds	r31, 0x0086
     ecc:	09 95       	icall
	}
}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <INT0_Init>:

/**-------------------------Function Definition Section-------------**/

/* Initializing interrupt zero */
void INT0_Init(INT_ConfigType *Config_Ptr)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <INT0_Init+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT0_PORT_ID, INT0_PIN_ID, PIN_INPUT);
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCR = (MCUCR & 0xFC) | ((Config_Ptr->controlZero));
     f0c:	a5 e5       	ldi	r26, 0x55	; 85
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e5 e5       	ldi	r30, 0x55	; 85
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	98 2f       	mov	r25, r24
     f18:	9c 7f       	andi	r25, 0xFC	; 252
     f1a:	e9 81       	ldd	r30, Y+1	; 0x01
     f1c:	fa 81       	ldd	r31, Y+2	; 0x02
     f1e:	83 81       	ldd	r24, Z+3	; 0x03
     f20:	89 2b       	or	r24, r25
     f22:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0xBF) | ((Config_Ptr->interruptZeroEN)<<INT0);
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	eb e5       	ldi	r30, 0x5B	; 91
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	2f 7b       	andi	r18, 0xBF	; 191
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	80 81       	ld	r24, Z
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	00 24       	eor	r0, r0
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	07 94       	ror	r0
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	07 94       	ror	r0
     f4a:	98 2f       	mov	r25, r24
     f4c:	80 2d       	mov	r24, r0
     f4e:	82 2b       	or	r24, r18
     f50:	8c 93       	st	X, r24
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <INT1_Init>:
/*-------------------------------------------------------------------*/

/* Initializing interrupt one */
void INT1_Init(INT_ConfigType *Config_Ptr)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <INT1_Init+0x6>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT1_PORT_ID, INT1_PIN_ID, PIN_INPUT);
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	63 e0       	ldi	r22, 0x03	; 3
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCR = (MCUCR & 0xF3) | ((Config_Ptr->controlOne)<<2);
     f74:	a5 e5       	ldi	r26, 0x55	; 85
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	23 7f       	andi	r18, 0xF3	; 243
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	84 81       	ldd	r24, Z+4	; 0x04
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	82 2b       	or	r24, r18
     f96:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0x7F) | ((Config_Ptr->interruptOneEN)<<INT1);
     f98:	ab e5       	ldi	r26, 0x5B	; 91
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e5       	ldi	r30, 0x5B	; 91
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	28 2f       	mov	r18, r24
     fa4:	2f 77       	andi	r18, 0x7F	; 127
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	81 81       	ldd	r24, Z+1	; 0x01
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	96 95       	lsr	r25
     fb2:	98 2f       	mov	r25, r24
     fb4:	88 27       	eor	r24, r24
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	82 2b       	or	r24, r18
     fbc:	8c 93       	st	X, r24
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <INT2_Init>:
/*-------------------------------------------------------------------*/

/* Initializing interrupt two */
void INT2_Init(INT_ConfigType *Config_Ptr)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <INT2_Init+0x6>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
	/* Initializing the pin direction as input pin */
	GPIO_setupPinDirection(INT2_PORT_ID, INT2_PIN_ID, PIN_INPUT);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_setupPinDirection>

	/* Interrupt Sense Control */
	MCUCSR = (MCUCSR & 0xBF) | ((Config_Ptr->controlTwo)<<ISC2);
     fe0:	a4 e5       	ldi	r26, 0x54	; 84
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e5       	ldi	r30, 0x54	; 84
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	28 2f       	mov	r18, r24
     fec:	2f 7b       	andi	r18, 0xBF	; 191
     fee:	e9 81       	ldd	r30, Y+1	; 0x01
     ff0:	fa 81       	ldd	r31, Y+2	; 0x02
     ff2:	85 81       	ldd	r24, Z+5	; 0x05
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	00 24       	eor	r0, r0
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	07 94       	ror	r0
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	07 94       	ror	r0
    1006:	98 2f       	mov	r25, r24
    1008:	80 2d       	mov	r24, r0
    100a:	82 2b       	or	r24, r18
    100c:	8c 93       	st	X, r24

	/* Enable the interrupt */
	GICR = (GICR & 0xDF) | ((Config_Ptr->interruptTwoEN)<<INT2);
    100e:	ab e5       	ldi	r26, 0x5B	; 91
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e5       	ldi	r30, 0x5B	; 91
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	28 2f       	mov	r18, r24
    101a:	2f 7d       	andi	r18, 0xDF	; 223
    101c:	e9 81       	ldd	r30, Y+1	; 0x01
    101e:	fa 81       	ldd	r31, Y+2	; 0x02
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	82 95       	swap	r24
    102c:	92 95       	swap	r25
    102e:	90 7f       	andi	r25, 0xF0	; 240
    1030:	98 27       	eor	r25, r24
    1032:	80 7f       	andi	r24, 0xF0	; 240
    1034:	98 27       	eor	r25, r24
    1036:	82 2b       	or	r24, r18
    1038:	8c 93       	st	X, r24

}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <INT0_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT0_setCallBack(void(*a_ptr)(void))
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <INT0_setCallBack+0x6>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	90 93 82 00 	sts	0x0082, r25
    105a:	80 93 81 00 	sts	0x0081, r24
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <INT1_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT1_setCallBack(void(*a_ptr)(void))
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	00 d0       	rcall	.+0      	; 0x106e <INT1_setCallBack+0x6>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	90 93 84 00 	sts	0x0084, r25
    107e:	80 93 83 00 	sts	0x0083, r24
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <INT2_setCallBack>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void INT2_setCallBack(void(*a_ptr)(void))
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <INT2_setCallBack+0x6>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	90 93 86 00 	sts	0x0086, r25
    10a2:	80 93 85 00 	sts	0x0085, r24
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <_exit>:
    10b0:	f8 94       	cli

000010b2 <__stop_program>:
    10b2:	ff cf       	rjmp	.-2      	; 0x10b2 <__stop_program>
